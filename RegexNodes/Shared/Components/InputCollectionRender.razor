@inject INodeHandler NodeHandler

<button class="add-button" @onclick="@AddItem">Add Item</button>
@for (int i = 0; i < Data.Inputs.Count; i++)
{
    var input = Data.Inputs[i];
    int _i = i;
    <div style="display:flex;">
        <NodeInputRender Data="@input" OnValueChanged="@Data.OnValueChanged"/>
        <button @onclick="@(() => MoveUp(input))" class="item-button"><i class="fas fa-chevron-up"></i></button>
        <button @onclick="@(() => MoveDown(input))" class="item-button"><i class="fas fa-chevron-down"></i></button>
        <button @onclick="@(() => RemoveItem(input))" class="item-button"><i class="fas fa-times"></i></button>
    </div>
}

@functions{
    [Parameter] protected InputCollection Data { get; set; }
    [Parameter] protected Action OnInputsChanged { get; set; }

    void AddItem()
    {
        Data.AddItem();
        OnInputsChanged?.Invoke();
    }

    void MoveUp(InputProcedural input)
    {
        Data.MoveUp(input);
        OnInputsChanged?.Invoke();
        NodeHandler.OnRequireNoodleRefresh?.Invoke();
    }
    void MoveDown(InputProcedural input)
    {
        Data.MoveDown(input);
        OnInputsChanged?.Invoke();
        NodeHandler.OnRequireNoodleRefresh?.Invoke();
    }
    void RemoveItem(InputProcedural input)
    {
        Data.RemoveItem(input);
        OnInputsChanged?.Invoke();
        NodeHandler.OnRequireNoodleRefresh?.Invoke();
    }
}