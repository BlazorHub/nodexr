@inject INodeDragService NodeDragService

<div draggable="true" onmousedown="event.stopPropagation()" ondrag="tempNoodle.dragNoodle(event)" @ondragstart="OnDragStart"
     class="@CssClass" @ondrop="@(() => NodeDragService.OnDropNoodle(Input))"
     ondragenter="tempNoodle.setValid()" ondragleave="tempNoodle.setInvalid()" ondragover="event.preventDefault()">
    <span class="outputtooltip" style="right:0">Previous</span>
</div>

@code {
    [Parameter] public InputProcedural Input { get; set; }
    [Parameter] public bool IsPrevious { get; set; } = false;

    string CssClass => "node-input-dot" + (IsPrevious ? " input-dot-previous" : "");

    protected override bool ShouldRender() => false;

    void OnDragStart(DragEventArgs e)
    {
        if (Input.InputNode != null)
        {
            NodeDragService.OnStartNoodleDrag(Input.InputNode, e, Input.Pos);
            Input.InputNode = null;
        }
    }
}
