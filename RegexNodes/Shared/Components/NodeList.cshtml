@using RegexNodes.Shared.NodeTypes;
@inject INodeHandler NodeHandler
@inject INodeDragService NodeDragService

    <div class="viewport sidebar">
        <div class="viewport-title-bar">
            <h1>Add Nodes:</h1>
        </div>

        @foreach (Type type in nodeTypes)
        {
            <button class="button-add-node" draggable="true" onclick="@((e)=>AddNode(type))">
                <b>
                    @type.Name
                </b>
            </button>
        }

        @*<ul class="nav flex-column" style="margin-top:5px;">
            @foreach (Type type in nodeTypes)
            {
                <li style="height:30px; margin:3px 10px;">
                    <button class="button-add-node" draggable="true" onclick="@((e)=>AddNode(type))">
                        <b>
                            @type.Name
                        </b>
                    </button>
                </li>
            }
        </ul>*@
    </div>

@functions{
    protected Type[] nodeTypes { get; set; }

    protected override void OnInit()
    {
        base.OnInit();
        nodeTypes = new Type[]
        {
            typeof(ExactString),
            typeof(OrNode),
            typeof(RegexRaw),
            typeof(ConcatNode),
            typeof(GroupNode),
            typeof(CommentNode),
            typeof(AnchorNode),
            typeof(WhitespaceNode),
            typeof(Quantifier),
            typeof(Backreference),
            typeof(OutputNode),
            typeof(CharSet),
        };
    }

    void AddNode(Type type)
    {
        INode node = (INode)Activator.CreateInstance(type);
        NodeHandler.AddNode(node, refreshIndex: true);
        //NodeDragService.OnStartNodeDrag(node, e);
    }
}
