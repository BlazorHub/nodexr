
@inject INodeDragService NodeDragService
@inject INodeHandler  NodeHandler
@using RegexNodes.Shared.NodeTypes

@if (!Data.IsCollapsed)
{
    <div class="node" style="top: @(Data.Pos.y)px; left: @(Data.Pos.x)px;"
         ondragover="event.preventDefault()" onmousedown="event.stopPropagation()">
        @{Console.WriteLine("Updating Node: " + Data.Title); }

        <div draggable="true" ondragstart="@(e => NodeDragService.OnStartNodeDrag(Data, e))" class="node-drag-region"></div>
        @*<div draggable="true" onmousedown="startNodeDrag(event)" class="node-drag-region"></div>*@
        <div class="node-title" style="background-color: @Color">
            <button onclick="@ToggleCollapsed" class="collapse-button"><i class="fas fa-chevron-down"></i></button>
            <b> @Data.Title</b>
        </div>
        <div class="node-content">
            @*<ol>*@
                @for (int i = 0; i < Data.NodeInputs.Count; i++)
                {
                    INodeInput nodeInput = Data.NodeInputs[i];
                    if (nodeInput.IsEnabled())
                    {
                        <NodeInputRender Data="nodeInput" OnValueChanged="OnValueChanged" OnInputsChanged="@Data.CalculateInputsPos" />
                    }
                }
            @*</ol>*@
            
            @*Output dot*@
            @if (!(Data is OutputNode))
            {
                <NodeOutputDot Data="Data" />
            }
        </div>
    </div>
}
else
{
    <div class="node" style="top: @(Data.Pos.y)px; left: @(Data.Pos.x)px;"
         ondragover="event.preventDefault()" onmousedown="event.stopPropagation()">
        @{Console.WriteLine("Updating Node: " + Data.Title); }

        <div draggable="true" ondragstart="@(e => NodeDragService.OnStartNodeDrag(Data, e))" class="node-drag-region"></div>
        @*<div draggable="true" onmousedown="startNodeDrag(event)" class="node-drag-region"></div>*@
        <div class="node-title collapsed" style="background-color: @Color; height:100%;">
            <button onclick="@ToggleCollapsed" class="collapse-button" style="top:-2px;"><i class="fas fa-chevron-up"></i></button>
            <b> @Data.Title</b>
        </div>

        @*Output dot*@
        @if (!(Data is OutputNode))
        {
            <NodeOutputDot Data="Data" />
        }
    </div>
}

@functions{
    [Parameter] protected INode Data { get; set; }
    [Parameter] protected int NodeId { get; set; }

    string Color => $"var(--col-node-{Data.Title.Replace(" ","").ToLower()})";

    void ToggleCollapsed()
    {
        Data.IsCollapsed = !Data.IsCollapsed;
        Data.CalculateInputsPos();
        NodeHandler.OnRequireNoodleRefresh?.Invoke();
    }

    void OnValueChanged()
    {
        Task.Run(OnValueChangedAsync);
    }
    async Task OnValueChangedAsync()
    {
        var getValueTask = Task.Run(Data.GetValueAndUpdateCache);
        var getOutputTask = Task.Run(NodeHandler.RecalculateOutput);
        await getValueTask;

        StateHasChanged();
        await getOutputTask;
    }
}