@if (Enabled)
{
    <div id="@DomId" class="@CssClass" style="left:@(StartPoint.x)px; top:@(StartPoint.y)px; width:@(Length)px; transform:rotate(@(Angle)deg);" />
}

@functions{
    public const string normalClass = "noodle";
    public const string invalidClass = "noodle noodle-invalid";

    [Parameter]
    protected Vector2L StartPoint { get; set; }
    [Parameter]
    protected Vector2L EndPoint { get; set; }
    [Parameter]
    protected string DomId { get; set; } = "";

    public bool Enabled { get; set; } = true;
    public bool Valid { get; set; } = true;
    public string CssClass => Valid ? normalClass : invalidClass;

    double Length
    {
        get
        {
            Vector2L delta = StartPoint - EndPoint;
            return delta.GetLength() + 1;
        }
    }

    double Angle
    {
        get
        {
            Vector2L delta = EndPoint - StartPoint;
            return (Math.Atan2((delta.y), (delta.x)) * (180 / Math.PI));
        }
    }

    public void SetStartPoint(Vector2L pos)
    {
        StartPoint = pos;
        StateHasChanged();
    }

    public void SetEndPoint(Vector2L pos)
    {
        EndPoint = pos;
        StateHasChanged();
    }

    public void Refresh()
    {
        StateHasChanged();
    }
}
